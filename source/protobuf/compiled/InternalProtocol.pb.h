/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8-dev */

#ifndef PB_INTERNALPROTOCOL_INTERNALPROTOCOL_PB_H_INCLUDED
#define PB_INTERNALPROTOCOL_INTERNALPROTOCOL_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* *
 Indicates if connection was successful or which error occurred */
typedef enum _InternalProtocol_DeviceConnectResponse_ResponseType {
    /* *
 Connection successful */
    InternalProtocol_DeviceConnectResponse_ResponseType_OK = 0,
    /* *
 Device with given name is already connected */
    InternalProtocol_DeviceConnectResponse_ResponseType_ALREADY_CONNECTED = 1,
    /* *
 Module server does not support given module */
    InternalProtocol_DeviceConnectResponse_ResponseType_MODULE_NOT_SUPPORTED = 2,
    /* *
 Module loaded by module server does not recognize given device type */
    InternalProtocol_DeviceConnectResponse_ResponseType_DEVICE_NOT_SUPPORTED = 3,
    /* *
 Device of the same deviceType with higher priority is already connected */
    InternalProtocol_DeviceConnectResponse_ResponseType_HIGHER_PRIORITY_ALREADY_CONNECTED = 4
} InternalProtocol_DeviceConnectResponse_ResponseType;

/* Enum for specification to which module the messages should be forwarded by internal server.
 Must mirror the enum number in InternalProtocol.proto
 RESERVED_MODULE is default module taking control of unspecified messages. */
typedef enum _InternalProtocol_Device_Module {
    /* *
 This is reserved place for a control module, which is default for devices that didn't set correct module
 It may serve for messages that are not aggregated. TODO will be implemented */
    InternalProtocol_Device_Module_RESERVED_MODULE = 0,
    /* Sending missions with the information about the route and stops to the autonomy */
    InternalProtocol_Device_Module_MISSION_MODULE = 1,
    /* Control of car accessories */
    InternalProtocol_Device_Module_CAR_ACCESSORY_MODULE = 2,
    InternalProtocol_Device_Module_EXAMPLE_MODULE = 999
} InternalProtocol_Device_Module;

/* Struct definitions */
/* Identification of a device. Only devices with unique module-deviceType-dataProvider combination can be connected. */
typedef struct _InternalProtocol_Device {
    /* *
 Serves for internal client to forward message to the correct module. */
    InternalProtocol_Device_Module module;
    /* Device type is module implementation dependent, it is recommended to implement as enumeration. */
    uint32_t deviceType;
    /* *
 name of role that the device provides, serves for distinction of devices
 important in device connection, where only single device of a deviceRole type can be connected to a module. */
    pb_callback_t deviceRole;
    /* device name */
    pb_callback_t deviceName;
    /* Priority of the device. Max priority = 0 */
    uint32_t priority;
} InternalProtocol_Device;

/* *
 Device connect information.
 Device connect message is used for establishing connection from module client to module server
 send as first message from module client to module server */
typedef struct _InternalProtocol_DeviceConnect {
    bool has_device;
    InternalProtocol_Device device;
} InternalProtocol_DeviceConnect;

/* *
 Device connect response information.
 Device connect response message is used for establishing connection from module client to module server
 send as response to deviceConnect message from module server to module client */
typedef struct _InternalProtocol_DeviceConnectResponse {
    InternalProtocol_DeviceConnectResponse_ResponseType responseType;
    bool has_device;
    InternalProtocol_Device device;
} InternalProtocol_DeviceConnectResponse;

typedef struct _InternalProtocol_DeviceStatus {
    bool has_device;
    InternalProtocol_Device device;
    pb_callback_t statusData;
} InternalProtocol_DeviceStatus;

typedef struct _InternalProtocol_InternalClient {
    pb_size_t which_MessageType;
    union {
        InternalProtocol_DeviceConnect deviceConnect;
        InternalProtocol_DeviceStatus deviceStatus;
    } MessageType;
} InternalProtocol_InternalClient;

/* binary command data */
typedef struct _InternalProtocol_DeviceCommand {
    bool has_device;
    InternalProtocol_Device device;
    pb_callback_t commandData;
} InternalProtocol_DeviceCommand;

typedef struct _InternalProtocol_InternalServer {
    pb_size_t which_MessageType;
    union {
        InternalProtocol_DeviceConnectResponse deviceConnectResponse;
        InternalProtocol_DeviceCommand deviceCommand;
    } MessageType;
} InternalProtocol_InternalServer;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _InternalProtocol_DeviceConnectResponse_ResponseType_MIN InternalProtocol_DeviceConnectResponse_ResponseType_OK
#define _InternalProtocol_DeviceConnectResponse_ResponseType_MAX InternalProtocol_DeviceConnectResponse_ResponseType_HIGHER_PRIORITY_ALREADY_CONNECTED
#define _InternalProtocol_DeviceConnectResponse_ResponseType_ARRAYSIZE ((InternalProtocol_DeviceConnectResponse_ResponseType)(InternalProtocol_DeviceConnectResponse_ResponseType_HIGHER_PRIORITY_ALREADY_CONNECTED+1))

#define _InternalProtocol_Device_Module_MIN InternalProtocol_Device_Module_RESERVED_MODULE
#define _InternalProtocol_Device_Module_MAX InternalProtocol_Device_Module_EXAMPLE_MODULE
#define _InternalProtocol_Device_Module_ARRAYSIZE ((InternalProtocol_Device_Module)(InternalProtocol_Device_Module_EXAMPLE_MODULE+1))




#define InternalProtocol_DeviceConnectResponse_responseType_ENUMTYPE InternalProtocol_DeviceConnectResponse_ResponseType



#define InternalProtocol_Device_module_ENUMTYPE InternalProtocol_Device_Module


/* Initializer values for message structs */
#define InternalProtocol_InternalClient_init_default {0, {InternalProtocol_DeviceConnect_init_default}}
#define InternalProtocol_InternalServer_init_default {0, {InternalProtocol_DeviceConnectResponse_init_default}}
#define InternalProtocol_DeviceConnect_init_default {false, InternalProtocol_Device_init_default}
#define InternalProtocol_DeviceConnectResponse_init_default {_InternalProtocol_DeviceConnectResponse_ResponseType_MIN, false, InternalProtocol_Device_init_default}
#define InternalProtocol_DeviceStatus_init_default {false, InternalProtocol_Device_init_default, {{NULL}, NULL}}
#define InternalProtocol_DeviceCommand_init_default {false, InternalProtocol_Device_init_default, {{NULL}, NULL}}
#define InternalProtocol_Device_init_default     {_InternalProtocol_Device_Module_MIN, 0, {{NULL}, NULL}, {{NULL}, NULL}, 0}
#define InternalProtocol_InternalClient_init_zero {0, {InternalProtocol_DeviceConnect_init_zero}}
#define InternalProtocol_InternalServer_init_zero {0, {InternalProtocol_DeviceConnectResponse_init_zero}}
#define InternalProtocol_DeviceConnect_init_zero {false, InternalProtocol_Device_init_zero}
#define InternalProtocol_DeviceConnectResponse_init_zero {_InternalProtocol_DeviceConnectResponse_ResponseType_MIN, false, InternalProtocol_Device_init_zero}
#define InternalProtocol_DeviceStatus_init_zero  {false, InternalProtocol_Device_init_zero, {{NULL}, NULL}}
#define InternalProtocol_DeviceCommand_init_zero {false, InternalProtocol_Device_init_zero, {{NULL}, NULL}}
#define InternalProtocol_Device_init_zero        {_InternalProtocol_Device_Module_MIN, 0, {{NULL}, NULL}, {{NULL}, NULL}, 0}

/* Field tags (for use in manual encoding/decoding) */
#define InternalProtocol_Device_module_tag       1
#define InternalProtocol_Device_deviceType_tag   2
#define InternalProtocol_Device_deviceRole_tag   3
#define InternalProtocol_Device_deviceName_tag   4
#define InternalProtocol_Device_priority_tag     5
#define InternalProtocol_DeviceConnect_device_tag 1
#define InternalProtocol_DeviceConnectResponse_responseType_tag 1
#define InternalProtocol_DeviceConnectResponse_device_tag 2
#define InternalProtocol_DeviceStatus_device_tag 1
#define InternalProtocol_DeviceStatus_statusData_tag 2
#define InternalProtocol_InternalClient_deviceConnect_tag 1
#define InternalProtocol_InternalClient_deviceStatus_tag 2
#define InternalProtocol_DeviceCommand_device_tag 1
#define InternalProtocol_DeviceCommand_commandData_tag 2
#define InternalProtocol_InternalServer_deviceConnectResponse_tag 1
#define InternalProtocol_InternalServer_deviceCommand_tag 2

/* Struct field encoding specification for nanopb */
#define InternalProtocol_InternalClient_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (MessageType,deviceConnect,MessageType.deviceConnect),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (MessageType,deviceStatus,MessageType.deviceStatus),   2)
#define InternalProtocol_InternalClient_CALLBACK NULL
#define InternalProtocol_InternalClient_DEFAULT NULL
#define InternalProtocol_InternalClient_MessageType_deviceConnect_MSGTYPE InternalProtocol_DeviceConnect
#define InternalProtocol_InternalClient_MessageType_deviceStatus_MSGTYPE InternalProtocol_DeviceStatus

#define InternalProtocol_InternalServer_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (MessageType,deviceConnectResponse,MessageType.deviceConnectResponse),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (MessageType,deviceCommand,MessageType.deviceCommand),   2)
#define InternalProtocol_InternalServer_CALLBACK NULL
#define InternalProtocol_InternalServer_DEFAULT NULL
#define InternalProtocol_InternalServer_MessageType_deviceConnectResponse_MSGTYPE InternalProtocol_DeviceConnectResponse
#define InternalProtocol_InternalServer_MessageType_deviceCommand_MSGTYPE InternalProtocol_DeviceCommand

#define InternalProtocol_DeviceConnect_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  device,            1)
#define InternalProtocol_DeviceConnect_CALLBACK NULL
#define InternalProtocol_DeviceConnect_DEFAULT NULL
#define InternalProtocol_DeviceConnect_device_MSGTYPE InternalProtocol_Device

#define InternalProtocol_DeviceConnectResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    responseType,      1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  device,            2)
#define InternalProtocol_DeviceConnectResponse_CALLBACK NULL
#define InternalProtocol_DeviceConnectResponse_DEFAULT NULL
#define InternalProtocol_DeviceConnectResponse_device_MSGTYPE InternalProtocol_Device

#define InternalProtocol_DeviceStatus_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  device,            1) \
X(a, CALLBACK, SINGULAR, BYTES,    statusData,        2)
#define InternalProtocol_DeviceStatus_CALLBACK pb_default_field_callback
#define InternalProtocol_DeviceStatus_DEFAULT NULL
#define InternalProtocol_DeviceStatus_device_MSGTYPE InternalProtocol_Device

#define InternalProtocol_DeviceCommand_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  device,            1) \
X(a, CALLBACK, SINGULAR, BYTES,    commandData,       2)
#define InternalProtocol_DeviceCommand_CALLBACK pb_default_field_callback
#define InternalProtocol_DeviceCommand_DEFAULT NULL
#define InternalProtocol_DeviceCommand_device_MSGTYPE InternalProtocol_Device

#define InternalProtocol_Device_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    module,            1) \
X(a, STATIC,   SINGULAR, UINT32,   deviceType,        2) \
X(a, CALLBACK, SINGULAR, STRING,   deviceRole,        3) \
X(a, CALLBACK, SINGULAR, STRING,   deviceName,        4) \
X(a, STATIC,   SINGULAR, UINT32,   priority,          5)
#define InternalProtocol_Device_CALLBACK pb_default_field_callback
#define InternalProtocol_Device_DEFAULT NULL

extern const pb_msgdesc_t InternalProtocol_InternalClient_msg;
extern const pb_msgdesc_t InternalProtocol_InternalServer_msg;
extern const pb_msgdesc_t InternalProtocol_DeviceConnect_msg;
extern const pb_msgdesc_t InternalProtocol_DeviceConnectResponse_msg;
extern const pb_msgdesc_t InternalProtocol_DeviceStatus_msg;
extern const pb_msgdesc_t InternalProtocol_DeviceCommand_msg;
extern const pb_msgdesc_t InternalProtocol_Device_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define InternalProtocol_InternalClient_fields &InternalProtocol_InternalClient_msg
#define InternalProtocol_InternalServer_fields &InternalProtocol_InternalServer_msg
#define InternalProtocol_DeviceConnect_fields &InternalProtocol_DeviceConnect_msg
#define InternalProtocol_DeviceConnectResponse_fields &InternalProtocol_DeviceConnectResponse_msg
#define InternalProtocol_DeviceStatus_fields &InternalProtocol_DeviceStatus_msg
#define InternalProtocol_DeviceCommand_fields &InternalProtocol_DeviceCommand_msg
#define InternalProtocol_Device_fields &InternalProtocol_Device_msg

/* Maximum encoded size of messages (where known) */
/* InternalProtocol_InternalClient_size depends on runtime parameters */
/* InternalProtocol_InternalServer_size depends on runtime parameters */
/* InternalProtocol_DeviceConnect_size depends on runtime parameters */
/* InternalProtocol_DeviceConnectResponse_size depends on runtime parameters */
/* InternalProtocol_DeviceStatus_size depends on runtime parameters */
/* InternalProtocol_DeviceCommand_size depends on runtime parameters */
/* InternalProtocol_Device_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
